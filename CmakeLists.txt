cmake_minimum_required(VERSION 2.8)

project(base)

#项目全局变量
set(CMAKE_CXX_COMPILER "g++")
set(CMAKE_CXX_FLAGS "-Wall")
set(CMAKE_CXX_FLAGS_DEBUG "-g3")
set(CMAKE_CXX_FLAGS_RELEASE "-O2")
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)

#指定库路径
link_directories(${LIBRARY_OUTPUT_PATH})

#base库
aux_source_directory(${PROJECT_SOURCE_DIR}/src/kernel/base BASE_LIB_SRC)
add_library(base STATIC ${BASE_LIB_SRC})

#可执行文件
aux_source_directory(${PROJECT_SOURCE_DIR}/src SRC_LIST)
include_directories(${PROJECT_SOURCE_DIR}/src/kernel)
include_directories(${PROJECT_SOURCE_DIR}/src/kernel/base)

#生成最终文件
if(${CMAKE_BUILD_TYPE} MATCHES "debug")
    add_executable(virtualComputer-debug ${SRC_LIST})
    target_link_libraries(virtualComputer-debug base)
    add_executable(asm-debug tool/asm.cpp)
    target_link_libraries(asm-debug base)
else()
    add_executable(virtualComputer ${SRC_LIST})
    target_link_libraries(virtualComputer base)
    add_executable(asm tool/asm.cpp)
    target_link_libraries(asm base)
endif()

##base组件库
#set(BASE_LIB_PATH ${PROJECT_SOURCE_DIR}/src/kernel/base)
##bits
#set(BITS_LIB_NAME "bits")
#set(BITS_LIB lib${BITS_LIB_NAME}.a)
#add_library(${BITS_LIB_NAME} STATIC ${BASE_LIB_PATH}/bits.cpp)
##bus
#set(BUS_LIB_NAME "bus")
#set(BUS_LIB lib${BUS_LIB_NAME}.a)
#add_library(${BUS_LIB_NAME} STATIC ${BASE_LIB_PATH}/bus.cpp)
##register
#set(REGISTER_LIB_NAME "regsiter")
#set(REGISTER_LIB lib${REGISTER_LIB_NAME}.a)
#add_library(${REGISTER_LIB_NAME} STATIC ${BASE_LIB_PATH}/register.cpp)
##alu
#set(ALU_LIB_NAME "alu")
#set(ALU_LIB lib${ALU_LIB_NAME}.a)
#add_library(${ALU_LIB_NAME} STATIC ${BASE_LIB_PATH}/alu.cpp)
##mutil_register
#set(MUTIL_REGISTER_LIB_NAME "mutilregister")
#set(MUTIL_REGISTER_LIB lib${MUTIL_REGISTER_LIB_NAME}.a)
#add_library(${MUTIL_REGISTER_LIB_NAME} STATIC ${BASE_LIB_PATH}/mutil_register.cpp)
##selector
#set(SELECTOR_LIB_NAME "selector")
#set(SELECTOR_LIB lib${SELECTOR_LIB_NAME}.a)
#add_library(${SELECTOR_LIB_NAME} STATIC ${BASE_LIB_PATH}/selector.cpp)
##shiftor
#set(SHIFTOR_LIB_NAME "shiftor")
#set(SHIFTOR_LIB lib${SHIFTOR_LIB_NAME}.a)
#add_library(${SHIFTOR_LIB_NAME} STATIC ${BASE_LIB_PATH}/shiftor.cpp)
##
#set(BASE_LIB ${BITS_LIB} ${BUS_LIB} ${REGISTER_LIB} ${ALU_LIB} ${MUTIL_REGISTER_LIB} ${SELECTOR_LIB} ${SHIFTOR_LIB})
#
##可执行文件
#aux_source_directory(${PROJECT_SOURCE_DIR}/src SRC_LIST)
#include_directories(${PROJECT_SOURCE_DIR}/src/kernel)
#include_directories(${PROJECT_SOURCE_DIR}/src/kernel/base)
#set(LIB_LIST ${BASE_LIB})
#
##生成最终文件
#if(${CMAKE_BUILD_TYPE} MATCHES "debug")
#    add_executable(virtualComputer-debug ${SRC_LIST})
#    target_link_libraries(virtualComputer-debug ${LIB_LIST})
#    add_executable(asm-debug tool/asm.cpp)
#    target_link_libraries(asm-debug ${LIB_LIST})
#else()
#    add_executable(virtualComputer ${SRC_LIST})
#    target_link_libraries(virtualComputer ${LIB_LIST})
#    add_executable(asm tool/asm.cpp)
#    target_link_libraries(asm ${LIB_LIST})
#endif()